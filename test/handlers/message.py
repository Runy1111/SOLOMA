import logging
import asyncio
from telegram import Update
from telegram.ext import ContextTypes
from analyzers.multi_level import MultiLevelAnalyzer
from config import RISK_LEVELS

class MessageHandler1:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    
    def __init__(self):
        self.analyzer = MultiLevelAnalyzer()
        self.user_warnings = {}
    
    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        user_text = update.message.text
        chat_id = update.effective_chat.id
        user_id = update.effective_user.id
        
        if user_text.startswith('/'):
            return
        
        # –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑
        analysis = await self.analyzer.analyze(user_text, chat_id, user_id)

        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—Ä–∞–∑—É, –µ—Å–ª–∏ –æ—Ü–µ–Ω–∫–∞ —Ä–∏—Å–∫–∞ –æ—á–µ–Ω—å –≤—ã—Å–æ–∫–∞—è
        if analysis.final_score >= 0.9:
            try:
                await update.message.delete()
                logging.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ –ø–æ –ø–æ—Ä–æ–≥—É score>=0.9: chat={chat_id}, user={user_id}, score={analysis.final_score}")
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ –ø–æ—Ä–æ–≥—É score>=0.9: {e}")
            return
        
        # –î–µ–π—Å—Ç–≤–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —É—Ä–æ–≤–Ω—è —Ä–∏—Å–∫–∞
        if analysis.risk_level == 'critical':
            await self._handle_critical_violation(update, analysis)
        elif analysis.risk_level == 'high':
            await self._handle_high_risk(update, analysis)
        elif analysis.risk_level == 'medium' and analysis.final_score > 0.7:
            await self._handle_medium_risk(update, analysis)
        
        # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        self._log_analysis(chat_id, user_id, analysis)
    
    async def _handle_critical_violation(self, update: Update, analysis):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –Ω–∞—Ä—É—à–µ–Ω–∏–π"""
        message = "üö® *–ù–ê–†–£–®–ï–ù–ò–ï –ó–ê–ö–û–ù–û–î–ê–¢–ï–õ–¨–°–¢–í–ê –†–§* üö®\n\n"
        
        for violation in analysis.rkn_violations:
            message += f"‚Ä¢ –ó–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–π —Ä–µ—Å—É—Ä—Å: {violation.domain}\n"
            if violation.reason:
                message += f"  –ü—Ä–∏—á–∏–Ω–∞: {violation.reason}\n"
        
        message += "\n_–°–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ. –ü–æ–≤—Ç–æ—Ä–Ω—ã–µ –Ω–∞—Ä—É—à–µ–Ω–∏—è –ø—Ä–∏–≤–µ–¥—É—Ç –∫ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ._"
        
        try:
            await update.message.delete()
            warning_msg = await update.message.reply_text(message, parse_mode='Markdown')
            await asyncio.sleep(30)
            await warning_msg.delete()
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    
    async def _handle_high_risk(self, update: Update, analysis):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã—Å–æ–∫–æ–≥–æ —Ä–∏—Å–∫–∞"""
        message = "‚ö†Ô∏è *–ö–û–ù–¢–ï–ö–°–¢–ù–û–ï –£–ü–û–ú–ò–ù–ê–ù–ò–ï –ó–ê–ü–†–ï–©–ï–ù–ù–û–ì–û –ö–û–ù–¢–ï–ù–¢–ê* ‚ö†Ô∏è\n\n"
        
        for violation in analysis.contextual_violations:
            message += f"‚Ä¢ {violation.reason}\n"
        
        message += "\n_–£–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–µ—Å—É—Ä—Å–æ–≤ –∑–∞–ø—Ä–µ—â–µ–Ω–æ._"
        
        await update.message.reply_text(message, parse_mode='Markdown')
    
    async def _handle_medium_risk(self, update: Update, analysis):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ä–µ–¥–Ω–µ–≥–æ —Ä–∏—Å–∫–∞"""
        risk_emoji = RISK_LEVELS.get(analysis.risk_level, '‚ö™Ô∏è')
        await update.message.reply_text(
            f"{risk_emoji} *–í–Ω–∏–º–∞–Ω–∏–µ:* –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –æ–ø–∞—Å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç\n"
            f"–û—Ü–µ–Ω–∫–∞: {analysis.final_score:.1%}",
            parse_mode='Markdown'
        )
    
    def _log_analysis(self, chat_id: int, user_id: int, analysis):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞"""
        logging.info(
            f"–ê–Ω–∞–ª–∏–∑: chat={chat_id}, user={user_id}, "
            f"risk={analysis.risk_level}, score={analysis.final_score:.3f}, "
            f"type={analysis.analysis_type}"
        )
